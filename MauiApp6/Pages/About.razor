@page "/about"
@using System.Text.Json
@using System.Net.Http.Json
<h1>Hakkımızda</h1>
<button class="btn btn-primary block" @onclick="GetData">Tıkla</button>
<p>@data</p>
@if (gitUserList.Count == 0)
{
    <p></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Adı</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var gitUser in gitUserList)
            {
                <tr>
                    <td>@gitUser.id</td>
                    <td>@gitUser.name</td>
                </tr>
            }
        </tbody>
    </table>
    <label>@deviceInf</label>
}
@code {
    private int data = 0;
    private string deviceInf = "";
    public List<Root> gitUserList = new List<Root>();
    static HttpClient client = new HttpClient();

    public async Task<Root> GetData()
    {
        HttpClient httpClient = new();
        Root res = new();

        HttpResponseMessage response = await client.GetAsync("https://api.tarikdavulcu.com/city/getcitylist");
        gitUserList = await response.Content.ReadFromJsonAsync<List<Root>>();
        data++;
        ReadDeviceInfo();
        TakePhoto();
        await GetCachedLocation();
        await TakeScreenshotAsync();
        // Set a string value:
        Preferences.Default.Set("first_name", "John");

        // Set an numerical value:
        Preferences.Default.Set("age", 28);

        // Set a boolean value:
        Preferences.Default.Set("has_pets", true);
        return res;
    }

    public async void TakePhoto()
    {
        if (MediaPicker.Default.IsCaptureSupported)
        {
            FileResult photo = await MediaPicker.Default.CapturePhotoAsync();

            if (photo != null)
            {
                // save the file into local storage
                string localFilePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

                using Stream sourceStream = await photo.OpenReadAsync();
                using FileStream localFileStream = File.OpenWrite(localFilePath);

                await sourceStream.CopyToAsync(localFileStream);
            }
        }
    }
    public async Task<ImageSource> TakeScreenshotAsync()
    {
        if (Screenshot.Default.IsCaptureSupported)
        {
            IScreenshotResult screen = await Screenshot.Default.CaptureAsync();

            Stream stream = await screen.OpenReadAsync();

            return ImageSource.FromStream(() => stream);
        }

        return null;
    }
    public async Task<string> GetCachedLocation()
    {
        try
        {
            Location location = await Geolocation.Default.GetLastKnownLocationAsync();

            if (location != null)
                return $"Latitude: {location.Latitude}, Longitude: {location.Longitude}, Altitude: {location.Altitude}";
        }
        catch (FeatureNotSupportedException fnsEx)
        {
            // Handle not supported on device exception
        }
        catch (FeatureNotEnabledException fneEx)
        {
            // Handle not enabled on device exception
        }
        catch (PermissionException pEx)
        {
            // Handle permission exception
        }
        catch (Exception ex)
        {
            // Unable to get location
        }

        return "None";
    }
    private void ReadDeviceInfo()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        sb.AppendLine($"Model: {DeviceInfo.Current.Model}");
        sb.AppendLine($"Manufacturer: {DeviceInfo.Current.Manufacturer}");
        sb.AppendLine($"Name: {DeviceInfo.Name}");
        sb.AppendLine($"OS Version: {DeviceInfo.VersionString}");
        sb.AppendLine($"Refresh Rate: {DeviceInfo.Current}");
        sb.AppendLine($"Idiom: {DeviceInfo.Current.Idiom}");
        sb.AppendLine($"Platform: {DeviceInfo.Current.Platform}");

        bool isVirtual = DeviceInfo.Current.DeviceType switch
        {
            DeviceType.Physical => false,
            DeviceType.Virtual => true,
            _ => false
        };

        sb.AppendLine($"Virtual device? {isVirtual}");

        deviceInf = sb.ToString();
    }

    public class Root
    {
        public int id { get; set; }
        public string name { get; set; }
    }
}
